name: Software Verification System

on:
  push:
    # tags:
      # - 'v*'
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  workflow_dispatch:

env:
  MSBUILD_PATH: ''
  INSTALLER_DOWNLOAD_URL: http://160.187.202.144/downloads/cov-analysis-win64-2024.12.1.exe # <-- 여기에 실제 서버 URL 입력
  INSTALLER_NAME: cov-analysis-win64-2024.12.1.exe # 다운로드될 파일명
  INSTALLER_VERSION: 2024.12.1 # <--- 설치 파일의 버전이 바뀔 때마다 이 값을 변경
  COVERITY_ORIGINAL_INSTALLER_NAME: cov-analysis-win64-2024.12.1.exe

jobs:
  Build-And-Analysis:
    runs-on: windows-latest
    
    permissions:
      security-events: write
      actions: write
      contents: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Coverity 라이선스 파일 생성
        shell: pwsh
        env:
          COVERITY_LICENSE_CONTENT: ${{ secrets.COVERITY_ANALYSIS_LICENSE }} # Secrets에서 라이선스 내용을 가져옵니다.
        run: |
          $licenseFileName = "license.dat"
          $licenseFilePath = "./$licenseFileName" # 현재 작업 디렉토리(리포지토리 루트)에 저장

          if ([string]::IsNullOrWhiteSpace($env:COVERITY_LICENSE_CONTENT)) {
              Write-Error "ERROR: 'COVERITY_ANALYSIS_LICENSE' secret이 비어있거나 설정되지 않았습니다."
              Write-Host "GitHub 저장소의 Settings -> Secrets and variables -> Actions 에 'COVERITY_ANALYSIS_LICENSE' secret이 올바르게 설정되어 있는지 확인하세요."
              exit 1
          }

          # 라이선스 내용을 파일에 씁니다.
          # -NoNewline을 사용하여 Secret 값 끝에 불필요한 새 줄이 추가되지 않도록 합니다.
          $env:COVERITY_LICENSE_CONTENT | Out-File -FilePath $licenseFilePath -Encoding UTF8 -NoNewline
          
          if (-not (Test-Path $licenseFilePath)) {
              Write-Error "ERROR: 라이선스 파일($licenseFilePath) 생성에 실패했습니다."
              exit 1
          }
          Write-Host "라이선스 파일($licenseFilePath)이 성공적으로 생성되었습니다."
          # 보안을 위해 라이선스 파일의 내용은 로그에 출력하지 않습니다.

          Write-Host "`n==== 생성된 라이선스 파일 확인 ===="
          # 특정 파일만 확인 (권장)
          Get-ChildItem -Path $licenseFilePath | Format-Table Name, Length, LastWriteTime -AutoSize
          # 또는 현재 디렉토리 전체 파일 목록에서 찾기
          Get-ChildItem -Path "./" -File | Where-Object {$_.Name -eq $licenseFileName} | Format-Table Name, Length, LastWriteTime -AutoSize
          Write-Host "==============================="


      - name: Coverity Installer Download from HTTP Server
        shell: pwsh
        env:
          INSTALLER_DOWNLOAD_URL: http://160.187.202.144/downloads/cov-analysis-win64-2024.12.1.exe 
          # 다운로드될 파일의 로컬 경로 및 이름 (워크플로우 작업 디렉토리 기준)
          LOCAL_INSTALLER_PATH: cov-analysis-win64-2024.12.1.exe 
        run: |
          $downloadUrl = "${{ env.INSTALLER_DOWNLOAD_URL }}"
          $outputPath = "${{ env.LOCAL_INSTALLER_PATH }}"

          Write-Host "Coverity 설치 파일 다운로드 시작..."
          Write-Host "URL: $downloadUrl"
          Write-Host "저장 위치: $outputPath"

          try {
              # Invoke-WebRequest를 사용하여 파일 다운로드
              # -Uri: 다운로드할 URL
              # -OutFile: 다운로드된 파일을 저장할 경로
              # -TimeoutSec: 다운로드 타임아웃 (초). 대용량 파일에 충분히 큰 값 설정 (예: 10분 = 600초)
              # -ErrorAction Stop: 오류 발생 시 스크립트 중단
              Invoke-WebRequest -Uri $downloadUrl -OutFile $outputPath -TimeoutSec 600 -ErrorAction Stop

              if (-not (Test-Path $outputPath)) {
                  throw "파일 다운로드에 실패했습니다. 파일이 생성되지 않았습니다."
              }
              Write-Host "`n파일 다운로드 성공!"
              Write-Host "다운로드된 파일 크기: $((Get-Item $outputPath).Length / 1MB) MB"
          }
          catch {
              Write-Error "`n파일 다운로드 중 오류 발생: $($_.Exception.Message)"
              Write-Error "URL ($downloadUrl)이 GitHub Runner에서 접근 가능한지, 또는 네트워크 문제가 없는지 확인하세요."
              exit 1
          }

          # (선택 사항: 다운로드된 파일 목록 확인)
          Write-Host "`n==== 다운로드 후 현재 디렉토리 파일 목록 ===="
          Get-ChildItem -Path "./" -File | Format-Table Name, Length, LastWriteTime -AutoSize
          Write-Host "============================"

      - name: 디스크 공간 확인 (GB 단위)
        shell: pwsh
        run: |
          Write-Host "==== 현재 러너의 디스크 공간 (GB 단위) ===="
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, Root, @{Name='Free(GB)'; Expression={$_.Free / 1GB -as [int]}}, @{Name='Used(GB)'; Expression={$_.Used / 1GB -as [int]}}, @{Name='Size(GB)'; Expression={$_.Size / 1GB -as [int]}} | Format-Table -AutoSize
          Write-Host "============================================="

      - name: Coverity 설치 프로그램 실행
        shell: pwsh
        env:
          COVERITY_ORIGINAL_INSTALLER_NAME: cov-analysis-win64-2024.12.1.exe
        run: |
          # 실행할 설치 파일의 절대 경로 (현재 작업 디렉토리에 있음)
          $installerPath = "./${{ env.COVERITY_ORIGINAL_INSTALLER_NAME }}" 
          
          # 라이선스 파일의 절대 경로 (현재 작업 디렉토리에 있음)
          $currentWorkingDirectory = Get-Location
          $licenseFullAbsolutePath = Join-Path $currentWorkingDirectory "license.dat"
          $licensePathArgument = "--license.cov.path=`"$licenseFullAbsolutePath`""
          
          # -----------------------------------------------------------------
          # 1. 최종 설치 인자 문자열 구성
          # -----------------------------------------------------------------
          $baseArguments = "-q -console --installation.dir=""C:\\Program Files\\Coverity"" --license.region=5 --license.agreement=agree --license.type.choice=0"
          $finalInstallerArguments = "$baseArguments $licensePathArgument"
          
          # -----------------------------------------------------------------
          # 2. 실행될 정확한 전체 명령어 문자열 구성 및 콘솔에 출력 (디버깅용)
          # 이 부분이 실제 CMD나 Bash에서 복사하여 실행할 수 있는 명령어 형태입니다.
          # -----------------------------------------------------------------
          $fullCommandToExecute = "`"$installerPath`" $finalInstallerArguments"
          Write-Host "DEBUG: 실행될 최종 설치 명령어: $fullCommandToExecute"
          
          # -----------------------------------------------------------------
          # 3. Coverity 설치 프로그램 실행
          # -----------------------------------------------------------------
          
          # Write-Host "Coverity 설치 시작."
          # & "$installerPath" $finalInstallerArguments
          # $exitCode = $LASTEXITCODE
          # Write-Host "Coverity 설치 프로그램 실행 완료."

          try {
              Write-Host "Coverity 설치 프로그램 실행 및 완료 대기 중..."
              Start-Process -FilePath "$installerPath" `
                            -ArgumentList "$finalInstallerArguments" `
                            -Wait ` # <--- 이 옵션이 설치가 완료될 때까지 기다립니다!
              
              $exitCode = $LASTEXITCODE # 프로세스가 종료된 후의 종료 코드를 가져옵니다.
          } catch {
              Write-Error "Coverity 설치 프로그램 호출 중 PowerShell 예외 발생: $($_.Exception.Message)"
              $exitCode = 9999
          }
          
          # -----------------------------------------------------------------
          # Coverity 설치 & 경로 내용 확인
          # -----------------------------------------------------------------
          $coverityInstallRoot = "C:\\Program Files\\Coverity" # 설치 경로 변수

          Write-Host "`n==== Coverity 설치 경로 '$coverityInstallRoot' 내용 ===="
          if (Test-Path $coverityInstallRoot) {
              # 설치 루트 폴더의 내용 확인
              Get-ChildItem -Path $coverityInstallRoot -Force | Format-Table Name, LastWriteTime, Mode, Length -AutoSize
              
              Write-Host "`n==== '$coverityInstallRoot' 하위 폴더에서 'cov-build.exe' 찾기 ===="
              # cov-build.exe 파일을 하위 폴더에서 재귀적으로 찾기
              $covBuildExecutable = Get-ChildItem -Path $coverityInstallRoot -Recurse -Filter "cov-build.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
              
              if ($covBuildExecutable) {
                  Write-Host "cov-build.exe 발견: $($covBuildExecutable.FullName)"
                  # PATH에 추가할 폴더 (cov-build.exe가 있는 디렉토리)
                  $coverityBinPath = $covBuildExecutable.DirectoryName
                  Write-Host "자동으로 찾은 Coverity CLI 경로: $coverityBinPath"
              } else {
                  Write-Warning "설치 경로 '$coverityInstallRoot' 내에서 'cov-build.exe'를 찾을 수 없습니다. 설치가 예상과 다르게 되었을 수 있습니다."
                  # PATH에 추가할 경로를 기본값으로 설정 (혹시 모를 상황 대비)
                  $coverityBinPath = Join-Path $coverityInstallRoot "bin"
              }
          } else {
              Write-Error "ERROR: Coverity 설치 경로 '$coverityInstallRoot'를 찾을 수 없습니다. 설치가 실패했을 가능성이 높습니다."
              $coverityBinPath = Join-Path $coverityInstallRoot "bin" # PATH 추가 시도용 기본값
          }
          Write-Host "============================================="

          # -----------------------------------------------------------------
          # Coverity CLI PATH 설정 및 확인 (위에서 찾은 경로를 사용)
          # -----------------------------------------------------------------
          if (Test-Path $coverityBinPath) { # 찾은 경로가 실제로 존재하는지 다시 확인
              $env:PATH += ";$coverityBinPath"
              Write-Host "Coverity CLI 경로 '$coverityBinPath'가 PATH에 추가되었습니다."
              cov-configure --msvc
          } else {
              Write-Warning "Coverity CLI 경로 '$coverityBinPath'를 찾을 수 없어 PATH에 추가하지 못했습니다. CLI 사용 불가."
          }



      # -----------------------------------------------------
      # Visual Studio 빌드 도구 설정
      # -----------------------------------------------------
      - name: Visual Studio 개발 환경 설정
        id: setup_msbuild
        uses: microsoft/setup-msbuild@v1.3.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      # -----------------------------------------------------
      # MSBuild 경로 저장
      # -----------------------------------------------------
      - name: MSBuild 경로 저장
        run: |
          $msbuildPath = vswhere.exe -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          echo "MSBUILD_PATH=$msbuildPath" >> $env:GITHUB_ENV
          Write-Host "MSBuild 경로가 설정되었습니다: $msbuildPath"
        shell: pwsh



      # Coverity Build Capture and Solution Build
      - name: Coverity Build Capture and Solution Build
        shell: pwsh
        env:
          COVERITY_INTERMEDIATE_DIR: idir # Coverity 중간 디렉토리
        run: |
          # MSBuild 경로 확인
          if (-not (Test-Path $env:MSBUILD_PATH)) {
            Write-Error "ERROR: MSBuild 경로를 찾을 수 없습니다."; exit 1 }
          
          # MSBuild 명령어 문자열
          # $buildCommandString = "`"$env:MSBUILD_PATH`" GitHub_VS2022_Test_Project.sln /p:Configuration=`"Release`" /t:Rebuild "
          
          # -----------------------------------------------------
          # 수정된 부분: 로그 관련 변수 및 리다이렉션 완전히 삭제
          # 오직 cov-build 명령어 실행만 남김
          # -----------------------------------------------------
          Write-Host "Coverity 빌드 캡처 시작..."
          # try {
          #     Start-Process -FilePath "C:\Program Files\Coverity\bin\cov-build.exe" `
          #                   -ArgumentList @(
          #                       "--dir",
          #                       "${{ env.COVERITY_INTERMEDIATE_DIR }}",
          #                       "`"$env:MSBUILD_PATH`" GitHub_VS2022_Test_Project.sln /p:Configuration=`"Release`" /t:Rebuild" # $buildCommandString 대신 직접 삽입
          #                   ) `
          #                   -Wait -NoNewWindow `
          #                   | Out-Null # Start-Process 객체가 로그에 출력되는 것을 방지
          #     $exitCode = $LASTEXITCODE
          # } catch {
          #     Write-Error "ERROR: cov-build 호출 중 예외 발생: $($_.Exception.Message)"; $exitCode = 9999 }

          $buildCommand = "$env:MSBUILD_PATH"
          $buildArgs = @(
            "GitHub_VS2022_Test_Project.sln",
            "/p:Configuration=Release",
            "/t:Rebuild",
            "/nodeReuse:false"
          )

          $covArgs = @(
            "--dir", "${{ env.COVERITY_INTERMEDIATE_DIR }}",
            $buildCommand
          ) + $buildArgs

          & "C:\Program Files\Coverity\bin\cov-build.exe" @covArgs
          $exitCode = $LASTEXITCODE
          
          Write-Host "Coverity 빌드 캡처 완료. (종료 코드: $exitCode)"


      # Coverity Analyze 실행
      - name: Coverity Analyze
        shell: pwsh
        env:
          COVERITY_INTERMEDIATE_DIR: idir # Coverity 중간 디렉토리
        run: |
          Write-Host "Coverity 분석 시작..."
          try {
              Start-Process -FilePath "C:\Program Files\Coverity\bin\cov-analyze.exe" `
                            -ArgumentList "--dir", "${{ env.COVERITY_INTERMEDIATE_DIR }}" `
                            -Wait -NoNewWindow `
                            | Out-Null
              $exitCode = $LASTEXITCODE
          } catch {
              Write-Error "ERROR: cov-analyze 호출 중 예외 발생: $($_.Exception.Message)"; $exitCode = 9999 }
          
          Write-Host "Coverity 분석 완료. (종료 코드: $exitCode)"


      # Coverity Commit Defects 실행
      - name: Coverity Commit Defects
        shell: pwsh
        env:
          COVERITY_INTERMEDIATE_DIR: idir # Coverity 중간 디렉토리
        run: |
          Write-Host "Coverity 결함 커밋 시작..."
          try {
              Start-Process -FilePath "C:\Program Files\Coverity\bin\cov-commit-defects.exe" `
                            -ArgumentList @(
                                "--dir", "${{ env.COVERITY_INTERMEDIATE_DIR }}",
                                "--url", "https://coverity.smsolus.com",
                                "--user", "admin",
                                "--password", "${{ secrets.COVERITY_CONNECT_PW }}", # <-- 여기 수정됨
                                "--stream", "github-VS2022"
                            ) `
                            -Wait -NoNewWindow `
                            | Out-Null
              $exitCode = $LASTEXITCODE
          } catch {
              Write-Error "ERROR: cov-commit-defects 호출 중 예외 발생: $($_.Exception.Message)"; $exitCode = 9999 }
          
          Write-Host "Coverity 결함 커밋 완료. (종료 코드: $exitCode)"

      - name: Black Duck SCA scan
        uses: blackduck-inc/black-duck-security-scan@805cbd09e806b01907bbea0f990723c2bb85abe9
        with:
          ### ---------- BLACKDUCK SCA SCANNING: REQUIRED FIELDS ----------
          blackducksca_url: ${{ vars.BLACKDUCKSCA_URL }}
          blackducksca_token: ${{ secrets.BLACKDUCKSCA_TOKEN }}

          ### ---------- COVERITY SCANNING: REQUIRED FIELDS ----------
          coverity_url: ${{ vars.COVERITY_URL }}
          coverity_user: ${{ secrets.COVERITY_USER }}
          coverity_passphrase: ${{ secrets.COVERITY_PASSPHRASE }}

          ### ---------- POLARIS SCANNING: REQUIRED FIELDS ----------
          polaris_server_url: ${{ vars.POLARIS_SERVER_URL }}
          polaris_access_token: ${{ secrets.POLARIS_ACCESS_TOKEN }}
          polaris_assessment_types: "SCA,SAST"

          ### ---------- SRM SCANNING: REQUIRED FIELDS ----------
          srm_url: ${{ vars.SRM_URL }}
          srm_apikey: ${{ secrets.SRM_API_KEY }}
          srm_assessment_types: "SCA,SAST"

